%{
#define _POSIX_C_SOURCE 200809L
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../headers/ast.h"
#include "../../sql_parser.tab.h"  /* Generated by yacc/bison */

extern int yylineno;
int yycolno = 1;

void update_column() {
    yycolno += yyleng;
}

void update_line() {
    yylineno++;
    yycolno = 1;
}

/* Set yylval for string tokens */
void set_string_value() {
    yylval.string_val = strdup(yytext);
}

void set_int_value() {
    yylval.int_val = atoi(yytext);
}

void set_float_value() {
    yylval.float_val = atof(yytext);
}
%}

%option noyywrap
%option case-insensitive
%option yylineno

DIGIT           [0-9]
LETTER          [a-zA-Z]
UNDERSCORE      [_]
IDENTIFIER      {LETTER}({LETTER}|{DIGIT}|{UNDERSCORE})*
INTEGER         {DIGIT}+
DECIMAL         {DIGIT}+\.{DIGIT}+
STRING          '[^']*'|\"[^\"]*\"
WHITESPACE      [ \t]+
NEWLINE         \n|\r\n|\r
COMMENT_LINE    --[^\r\n]*
COMMENT_BLOCK   \/\*([^*]|\*[^/])*\*\/

%%

"SELECT"        { update_column(); return SELECT; }
"FROM"          { update_column(); return FROM; }
"WHERE"         { update_column(); return WHERE; }
"INSERT"        { update_column(); return INSERT; }
"INTO"          { update_column(); return INTO; }
"VALUES"        { update_column(); return VALUES; }
"UPDATE"        { update_column(); return UPDATE; }
"SET"           { update_column(); return SET; }
"DELETE"        { update_column(); return DELETE; }
"CREATE"        { update_column(); return CREATE; }
"TABLE"         { update_column(); return TABLE; }
"DROP"          { update_column(); return DROP; }
"ALTER"         { update_column(); return ALTER; }
"AND"           { update_column(); return AND; }
"OR"            { update_column(); return OR; }
"NOT"           { update_column(); return NOT; }
"NULL"          { update_column(); return NULL_TOK; }
"TRUE"          { update_column(); return TRUE_TOK; }
"FALSE"         { update_column(); return FALSE_TOK; }
"AS"            { update_column(); return AS; }
"ORDER"         { update_column(); return ORDER; }
"BY"            { update_column(); return BY; }
"GROUP"         { update_column(); return GROUP; }
"HAVING"        { update_column(); return HAVING; }
"LIMIT"         { update_column(); return LIMIT; }
"OFFSET"        { update_column(); return OFFSET; }
"JOIN"          { update_column(); return JOIN; }
"INNER"         { update_column(); return INNER; }
"LEFT"          { update_column(); return LEFT; }
"RIGHT"         { update_column(); return RIGHT; }
"OUTER"         { update_column(); return OUTER; }
"ON"            { update_column(); return ON; }
"USING"         { update_column(); return USING; }
"DISTINCT"      { update_column(); return DISTINCT; }
"ALL"           { update_column(); return ALL; }
"IN"            { update_column(); return IN; }
"EXISTS"        { update_column(); return EXISTS; }
"BETWEEN"       { update_column(); return BETWEEN; }
"LIKE"          { update_column(); return LIKE; }
"IS"            { update_column(); return IS; }
"UNION"         { update_column(); return UNION; }
"INTERSECT"     { update_column(); return INTERSECT; }
"EXCEPT"        { update_column(); return EXCEPT; }

"INT"           { update_column(); return INT_TYPE; }
"INTEGER"       { update_column(); return INTEGER_TYPE; }
"VARCHAR"       { update_column(); return VARCHAR_TYPE; }
"CHAR"          { update_column(); return CHAR_TYPE; }
"TEXT"          { update_column(); return TEXT_TYPE; }
"DECIMAL"       { update_column(); return DECIMAL_TYPE; }
"NUMERIC"       { update_column(); return NUMERIC_TYPE; }
"FLOAT"         { update_column(); return FLOAT_TYPE; }
"REAL"          { update_column(); return REAL_TYPE; }
"DATE"          { update_column(); return DATE_TYPE; }
"TIME"          { update_column(); return TIME_TYPE; }
"TIMESTAMP"     { update_column(); return TIMESTAMP_TYPE; }
"BOOLEAN"       { update_column(); return BOOLEAN_TYPE; }

"PRIMARY"       { update_column(); return PRIMARY; }
"KEY"           { update_column(); return KEY; }
"FOREIGN"       { update_column(); return FOREIGN; }
"REFERENCES"    { update_column(); return REFERENCES; }
"UNIQUE"        { update_column(); return UNIQUE; }
"CHECK"         { update_column(); return CHECK; }
"DEFAULT"       { update_column(); return DEFAULT; }
"AUTO_INCREMENT" { update_column(); return AUTO_INCREMENT; }

"="             { update_column(); return EQUAL; }
"<>"            { update_column(); return NOT_EQUAL; }
"!="            { update_column(); return NOT_EQUAL; }
"<"             { update_column(); return LESS_THAN; }
">"             { update_column(); return GREATER_THAN; }
"<="            { update_column(); return LESS_EQUAL; }
">="            { update_column(); return GREATER_EQUAL; }
"+"             { update_column(); return PLUS; }
"-"             { update_column(); return MINUS; }
"*"             { update_column(); return MULTIPLY; }
"/"             { update_column(); return DIVIDE; }
"%"             { update_column(); return MODULO; }

"("             { update_column(); return LPAREN; }
")"             { update_column(); return RPAREN; }
","             { update_column(); return COMMA; }
";"             { update_column(); return SEMICOLON; }
"."             { update_column(); return DOT; }

"COUNT"         { update_column(); return COUNT; }
"SUM"           { update_column(); return SUM; }
"AVG"           { update_column(); return AVG; }
"MIN"           { update_column(); return MIN; }
"MAX"           { update_column(); return MAX; }

{INTEGER}       { update_column(); set_int_value(); return INTEGER_LITERAL; }
{DECIMAL}       { update_column(); set_float_value(); return DECIMAL_LITERAL; }
{STRING}        { 
                  update_column(); 
                  /* Remove quotes from string literal */
                  int len = strlen(yytext);
                  char* str = malloc(len - 1);
                  strncpy(str, yytext + 1, len - 2);
                  str[len - 2] = '\0';
                  yylval.string_val = str;
                  return STRING_LITERAL; 
                }

{IDENTIFIER}    { update_column(); set_string_value(); return IDENTIFIER; }

{COMMENT_LINE}  { update_column(); }
{COMMENT_BLOCK} { 
                  char *p = yytext;
                  while (*p) {
                    if (*p == '\n') {
                      update_line();
                    } else {
                      yycolno++;
                    }
                    p++;
                  }
                }

{WHITESPACE}    { update_column(); }
{NEWLINE}       { update_line(); }

.               { 
                  update_column(); 
                  return UNKNOWN_TOKEN; 
                }

%%